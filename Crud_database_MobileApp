import 'package:flutter/material.dart';
import 'package:sqflite/sqflite.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart';
import 'dart:io';

class UserDatabase {
  static Database? _database;
  static final UserDatabase instance = UserDatabase._privateConstructor();

  UserDatabase._privateConstructor();

  Future<Database> get database async {
    if (_database != null) return _database!;
    _database = await _initDatabase();
    return _database!;
  }

  Future<Database> _initDatabase() async {
    Directory documentsDirectory = await getApplicationDocumentsDirectory();
    String path = join(documentsDirectory.path, 'users.db');

    return await openDatabase(
      path,
      version: 1,
      onCreate: (db, version) async {
        await db.execute('''
          CREATE TABLE users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            email TEXT,
            age INTEGER
          )
        ''');
      },
    );
  }

  // Insert user
  Future<int> addUser(String name, String email, int age) async {
    final db = await database;
    return await db.insert('users', {'name': name, 'email': email, 'age': age});
  }

  // Get all users
  Future<List<Map<String, dynamic>>> getUsers() async {
    final db = await database;
    return await db.query('users');
  }

  // Update user
  Future<int> updateUser(int id, String name, String email, int age) async {
    final db = await database;
    return await db.update(
      'users',
      {'name': name, 'email': email, 'age': age},
      where: 'id = ?',
      whereArgs: [id],
    );
  }

  // Delete user
  Future<int> deleteUser(int id) async {
    final db = await database;
    return await db.delete('users', where: 'id = ?', whereArgs: [id]);
  }
}

void main() {
  runApp(CrudwithDatabase());
}

class CrudwithDatabase extends StatefulWidget {
  const CrudwithDatabase({Key? key}) : super(key: key);

  @override
  State<CrudwithDatabase> createState() => _CrudwithDatabaseState();
}

class _CrudwithDatabaseState extends State<CrudwithDatabase> {
  final dbHelper = UserDatabase.instance;
  var nameController = TextEditingController();
  var mailController = TextEditingController();
  var ageController = TextEditingController();
  bool isEditing = false;
  int? editingId;
  List<Map<String, dynamic>> users = [];

  @override
  void initState() {
    super.initState();
    _refreshUsers();
  }

  // Fetch all users from the database
  void _refreshUsers() async {
    users = await dbHelper.getUsers();
    setState(() {});
  }

  // Add or update user
  void _addOrUpdateUser() async {
    if (nameController.text.isNotEmpty &&
        mailController.text.isNotEmpty &&
        ageController.text.isNotEmpty) {
      if (isEditing) {
        await dbHelper.updateUser(
          editingId!,
          nameController.text,
          mailController.text,
          int.parse(ageController.text),
        );
        isEditing = false;
        editingId = null;
      } else {
        await dbHelper.addUser(
          nameController.text,
          mailController.text,
          int.parse(ageController.text),
        );
      }
      _refreshUsers();
      nameController.clear();
      mailController.clear();
      ageController.clear();
    }
  }

  // Start editing user
  void _startEditing(Map<String, dynamic> user) {
    setState(() {
      isEditing = true;
      editingId = user['id'];
      nameController.text = user['name'];
      mailController.text = user['email'];
      ageController.text = user['age'].toString();
    });
  }

  // Delete user
  void _deleteUser(int id) async {
    await dbHelper.deleteUser(id);
    _refreshUsers();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text("CRUD App with SQLite")),
        body: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              _buildTextField(nameController, 'Name'),
              SizedBox(height: 10),
              _buildTextField(mailController, 'Email'),
              SizedBox(height: 10),
              _buildTextField(ageController, 'Age', keyboardType: TextInputType.number),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _addOrUpdateUser,
                child: Text(isEditing ? 'Update User' : 'Add User'),
              ),
              SizedBox(height: 20),
              Expanded(
                child: ListView.builder(
                  itemCount: users.length,
                  itemBuilder: (context, index) {
                    final user = users[index];
                    return _buildUserItem(user);
                  },
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  // Helper method for text fields
  Widget _buildTextField(TextEditingController controller, String label,
      {TextInputType keyboardType = TextInputType.text}) {
    return TextField(
      controller: controller,
      keyboardType: keyboardType,
      decoration: InputDecoration(
        labelText: label,
        border: OutlineInputBorder(),
      ),
    );
  }

  // Helper method to display a user item
  Widget _buildUserItem(Map<String, dynamic> user) {
    return Card(
      margin: EdgeInsets.symmetric(vertical: 10),
      child: ListTile(
        title: Text(user['name']),
        subtitle: Text('Email: ${user['email']}\nAge: ${user['age']}'),
        trailing: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            IconButton(
              icon: Icon(Icons.edit),
              onPressed: () => _startEditing(user),
            ),
            IconButton(
              icon: Icon(Icons.delete),
              onPressed: () => _deleteUser(user['id']),
            ),
          ],
        ),
      ),
    );
  }
}




//
//
// name: crud_database
// description: "A new Flutter project."
// # The following line prevents the package from being accidentally published to
// # pub.dev using `flutter pub publish`. This is preferred for private packages.
// publish_to: 'none' # Remove this line if you wish to publish to pub.dev
//
// # The following defines the version and build number for your application.
// # A version number is three numbers separated by dots, like 1.2.43
// # followed by an optional build number separated by a +.
// # Both the version and the builder number may be overridden in flutter
// # build by specifying --build-name and --build-number, respectively.
// # In Android, build-name is used as versionName while build-number used as versionCode.
// # Read more about Android versioning at https://developer.android.com/studio/publish/versioning
// # In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
// # Read more about iOS versioning at
// # https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
// # In Windows, build-name is used as the major, minor, and patch parts
// # of the product and file versions while build-number is used as the build suffix.
// version: 1.0.0+1
//
// environment:
// sdk: ^3.7.0
//
// # Dependencies specify other packages that your package needs in order to work.
// # To automatically upgrade your package dependencies to the latest versions
// # consider running `flutter pub upgrade --major-versions`. Alternatively,
// # dependencies can be manually updated by changing the version numbers below to
// # the latest version available on pub.dev. To see which dependencies have newer
// # versions available, run `flutter pub outdated`.
// dependencies:
// flutter:
// sdk: flutter
// sqflite: ^2.3.0 # âœ… Ensure this is added
// path_provider: ^2.0.15
// path: ^1.8.3
//
// dev_dependencies:
// flutter_test:
// sdk: flutter
//
// # The "flutter_lints" package below contains a set of recommended lints to
// # encourage good coding practices. The lint set provided by the package is
// # activated in the `analysis_options.yaml` file located at the root of your
// # package. See that file for information about deactivating specific lint
// # rules and activating additional ones.
// flutter_lints: ^5.0.0
//
// # For information on the generic Dart part of this file, see the
// # following page: https://dart.dev/tools/pub/pubspec
//
// # The following section is specific to Flutter packages.
// flutter:
//
// # The following line ensures that the Material Icons font is
// # included with your application, so that you can use the icons in
// # the material Icons class.
// uses-material-design: true
//
// # To add assets to your application, add an assets section, like this:
// # assets:
// #   - images/a_dot_burr.jpeg
// #   - images/a_dot_ham.jpeg
//
// # An image asset can refer to one or more resolution-specific "variants", see
// # https://flutter.dev/to/resolution-aware-images
//
// # For details regarding adding assets from package dependencies, see
// # https://flutter.dev/to/asset-from-package
//
// # To add custom fonts to your application, add a fonts section here,
// # in this "flutter" section. Each entry in this list should have a
// # "family" key with the font family name, and a "fonts" key with a
// # list giving the asset and other descriptors for the font. For
// # example:
// # fonts:
// #   - family: Schyler
// #     fonts:
// #       - asset: fonts/Schyler-Regular.ttf
// #       - asset: fonts/Schyler-Italic.ttf
// #         style: italic
// #   - family: Trajan Pro
// #     fonts:
// #       - asset: fonts/TrajanPro.ttf
// #       - asset: fonts/TrajanPro_Bold.ttf
// #         weight: 700
// #
// # For details regarding fonts from package dependencies,
// # see https://flutter.dev/to/font-from-package

